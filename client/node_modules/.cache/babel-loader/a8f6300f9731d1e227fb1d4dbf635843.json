{"ast":null,"code":"var _jsxFileName = \"/Users/trungdiec/thunder/unit1/project1/brew-master/src/components/RemoveDuplicates.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RemoveDuplicates = _ref => {\n  var _base$ingredients;\n\n  let {\n    base\n  } = _ref;\n  let hopArr = [];\n  let newHopArr = [];\n  base === null || base === void 0 ? void 0 : (_base$ingredients = base.ingredients) === null || _base$ingredients === void 0 ? void 0 : _base$ingredients.hops.map(hop => {\n    hopArr.push(hop.name);\n    let obj = {};\n\n    for (let i of hopArr) {\n      obj[i] = true;\n    }\n\n    newHopArr = Object.keys(obj);\n  });\n  return newHopArr.map(hop => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: hop\n    }, hop, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c = RemoveDuplicates;\nexport default RemoveDuplicates;\n\nvar _c;\n\n$RefreshReg$(_c, \"RemoveDuplicates\");","map":{"version":3,"sources":["/Users/trungdiec/thunder/unit1/project1/brew-master/src/components/RemoveDuplicates.jsx"],"names":["RemoveDuplicates","base","hopArr","newHopArr","ingredients","hops","map","hop","push","name","obj","i","Object","keys"],"mappings":";;;AACA,MAAMA,gBAAgB,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACrC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,SAAS,GAAG,EAAhB;AACAF,EAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,iCAAAA,IAAI,CAAEG,WAAN,wEAAmBC,IAAnB,CAAwBC,GAAxB,CAA6BC,GAAD,IAAS;AACnCL,IAAAA,MAAM,CAACM,IAAP,CAAYD,GAAG,CAACE,IAAhB;AACA,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAT,IAAcT,MAAd,EAAsB;AACpBQ,MAAAA,GAAG,CAACC,CAAD,CAAH,GAAS,IAAT;AACD;;AACDR,IAAAA,SAAS,GAAGS,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAZ;AACD,GAPD;AAQA,SACAP,SAAS,CAACG,GAAV,CAAeC,GAAD,IAAS;AACrB,wBAAO;AAAA,gBAAcA;AAAd,OAAQA,GAAR;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,CADA;AAID,CAfD;;KAAMP,gB;AAiBN,eAAeA,gBAAf","sourcesContent":["\nconst RemoveDuplicates = ({ base }) => {\n  let hopArr = [];\n  let newHopArr = [];\n  base?.ingredients?.hops.map((hop) => {\n    hopArr.push(hop.name);\n    let obj = {};\n    for (let i of hopArr) {\n      obj[i] = true;\n    }\n    newHopArr = Object.keys(obj);\n  })\n  return(\n  newHopArr.map((hop) => {\n    return <p key={hop}>{hop}</p>\n  }))\n};\n\nexport default RemoveDuplicates\n"]},"metadata":{},"sourceType":"module"}